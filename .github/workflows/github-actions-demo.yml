name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Add SSH private keys for submodule repositories
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: |
          ${{ secrets.SSH_PRIVATE_KEY }}
    - run: git submodule update --init --recursive --remote
    
    - name: setup config file
      run: |
        ls /home/runner/work/noticeboard-api/noticeboard-api/main-config-files/
        ls /home/runner/work/noticeboard-api/noticeboard-api/test-config-files/
        cp /home/runner/work/noticeboard-api/noticeboard-api/main-config-files/application.yml /home/runner/work/noticeboard-api/noticeboard-api/src/main/resources/application.yml
        cp /home/runner/work/noticeboard-api/noticeboard-api/test-config-files/application-test.yml /home/runner/work/noticeboard-api/noticeboard-api/src/test/resources/application-test.yml
      
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
           java-version: '11'
           distribution: 'corretto'
           cache: gradle
           
    - name: Get Github action IP
      id: ip
      uses: haythem/public-ip@v1.2        
   
    - name: Add Github Actions IP to Security group
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_EC2_SG_ID }} --group-name ${{secrets.AWS_EC2_SG_NAME}} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_RDS_SG_ID }} --group-name ${{secrets.AWS_RDS_SG_NAME}} --protocol tcp --port 3306 --cidr ${{ steps.ip.outputs.ipv4 }}/32
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        
    - name: Build with Gradle
      run: ./gradlew build -Djooq.codegen.jdbc.driver=${{ secrets.JDBC_DRIVER }} -Djooq.codegen.jdbc.url=${{ secrets.JDBC_URL }} -Djooq.codegen.jdbc.user=${{ secrets.JDBC_USER }} -Djooq.codegen.jdbc.password=${{ secrets.JDBC_PASSWORD }}

    - name: Run tests
      run: ./gradlew test -Djooq.codegen.jdbc.driver=${{ secrets.JDBC_DRIVER }} -Djooq.codegen.jdbc.url=${{ secrets.JDBC_URL }} -Djooq.codegen.jdbc.user=${{ secrets.JDBC_USER }} -Djooq.codegen.jdbc.password=${{ secrets.JDBC_PASSWORD }}

    - name: Create JAR artifact
      run: mv build/libs/*.jar app.jar

    - name: Install AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y awscli

    - name: Upload JAR to S3
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ap-northeast-1
        SOURCE_DIR: ./
        DEST_DIR: /jar/
        EXCLUDE: ''

    - name: Deploy to EC2 instance
      run: |
        ssh -o "StrictHostKeyChecking=no" ubuntu@${{ secrets.EC2_INSTANCE_IP }} 'bash -s' < deploy.sh
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Test deployment
      run: |
        curl http://${{ secrets.EC2_INSTANCE_IP }}:8080/health
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: check datasource
      if: always()
      run: |
        cat ./src/main/resources/application.yml
        cat ./src/test/resources/application-test.yml

    
    - name: Remove Github Actions IP from security group
      if: always()
      run: |
        aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_EC2_SG_ID }} --group-name ${{secrets.AWS_EC2_SG_NAME}} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_RDS_SG_ID }} --group-name ${{secrets.AWS_RDS_SG_NAME}} --protocol tcp --port 3306 --cidr ${{ steps.ip.outputs.ipv4 }}/32
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
